@page "/fetchdata"
@using Newtonsoft.Json;
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

@foreach (var p in posts)
{
    <p>@p.Title</p>
    <p>@p.Content</p>
    foreach (var c in p.Comments)
    {
        <p>@c.Content</p>
    }
}

@foreach (var item in forecasts)
{
    <p>@item.FileName</p>
}

@code {
    private List<PdfModel?> forecasts;
    private List<Post?> posts;



    protected override async Task OnInitializedAsync()
    {
        forecasts = new();
        posts = new();
        var tasks = new List<Task>();
        var a =Task.Run(async () =>
        {

            await foreach (var p in GetPostAsync())
            {
                posts.Add(p);

                this.StateHasChanged();
            }
                Console.WriteLine("a ok");
        });
        var b= Task.Run(async () =>
        {
            await foreach (var weatherForecast in GetDataAsync())
            {
                forecasts.Add(weatherForecast);

                this.StateHasChanged();

            }
                Console.WriteLine("b ok");
        });
        tasks.Add(a);
        tasks.Add(b);
        
        Task.WhenAll(tasks);
    }

    public async IAsyncEnumerable<PdfModel> GetDataAsync()
    {
        var serializer = new JsonSerializer();

        using (var stream = await Http.GetStreamAsync("http://localhost:8081/api/pdf/all"))
        {
            using (var sr = new StreamReader(stream))
            using (var jr = new JsonTextReader(sr))
            {
                while (await jr.ReadAsync())
                {
                    if (jr.TokenType != JsonToken.StartArray && jr.TokenType != JsonToken.EndArray)
                    {
                        yield return serializer.Deserialize<PdfModel>(jr);
                    }
                };
            }
        }
    }
    public async IAsyncEnumerable<Post> GetPostAsync()
    {
        var serializer = new JsonSerializer();

        using (var stream = await Http.GetStreamAsync("http://localhost:8081/api/post"))
        {
            using (var sr = new StreamReader(stream))
            using (var jr = new JsonTextReader(sr))
            {
                while (await jr.ReadAsync())
                {
                    if (jr.TokenType != JsonToken.StartArray && jr.TokenType != JsonToken.EndArray)
                    {
                        yield return serializer.Deserialize<Post>(jr);
                    }
                };
            }
        }
    }
}

